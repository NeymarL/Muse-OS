     1                                  ; func
     2                                  ; TAB=4
     3                                  
     4                                  [BITS 32]               ; 制作32位模式用的机器语言
     5                                  
     6                                          GLOBAL      io_hlt, io_cli, io_sti, io_stihlt  
     7                                          GLOBAL      write_mem8
     8                                          GLOBAL      io_in8, io_in16, io_in32
     9                                          GLOBAL      io_out8, io_out16, io_out32
    10                                          GLOBAL      io_load_eflags, io_store_eflags
    11                                  
    12                                  ; 以下是实际函数
    13                                  
    14                                  io_hlt:     ; void io_hlt();
    15 00000000 F4                          HLT
    16 00000001 C3                          RET
    17                                  
    18                                  write_mem8: ; void write_mem8(int addr, int data);
    19 00000002 51                          PUSH    ECX
    20 00000003 6650                        PUSH    AX
    21 00000005 89F9                        MOV     ECX, EDI
    22 00000007 B800000000                  MOV     EAX, 0
    23 0000000C 6689F0                      MOV     AX, SI
    24 0000000F 8801                        MOV     [ECX], AL
    25 00000011 6658                        POP     AX
    26 00000013 59                          POP     ECX
    27 00000014 C3                          RET
    28                                  
    29                                  io_cli:     ; void io_cli();
    30 00000015 FA                          CLI 
    31 00000016 C3                          RET
    32                                  
    33                                  io_sti:     ; void io_sti();
    34 00000017 FB                          STI 
    35 00000018 C3                          RET
    36                                  
    37                                  io_stihlt:  ; void io_stihlt();
    38 00000019 FB                          STI 
    39 0000001A F4                          HLT 
    40 0000001B C3                          RET
    41                                  
    42                                  io_in8:     ; int io_in8(int port);
    43 0000001C 89FA                        MOV     EDX, EDI ; port
    44 0000001E B800000000                  MOV     EAX, 0
    45 00000023 EC                          IN      AL, DX
    46 00000024 C3                          RET
    47                                  
    48                                  io_in16:    ; int io_in16(int port);
    49 00000025 89FA                        MOV     EDX, EDI ; port
    50 00000027 B800000000                  MOV     EAX, 0
    51 0000002C 66ED                        IN      AX, DX
    52 0000002E C3                          RET             ; 执行RET语句时，EAX的值就被看作是函数的返回值
    53                                  
    54                                  io_in32:    ; int io_in32(int port);
    55 0000002F 89FA                        MOV     EDX, EDI ; port
    56 00000031 ED                          IN      EAX, DX
    57 00000032 C3                          RET
    58                                  
    59                                  io_out8:   ; void io_out8(int port, int data);
    60 00000033 89FA                        MOV     EDX, EDI ; port
    61 00000035 B800000000                  MOV     EAX, 0
    62 0000003A 6689F0                      MOV     AX, SI          ; data
    63 0000003D 66EF                        OUT     DX, AX
    64 0000003F C3                          RET
    65                                  
    66                                  io_out16:   ; void io_out16(int port, int data);
    67 00000040 89FA                        MOV     EDX, EDI ; port
    68 00000042 B800000000                  MOV     EAX, 0
    69 00000047 6689F0                      MOV     AX, SI          ; data
    70 0000004A 66EF                        OUT     DX, AX
    71 0000004C C3                          RET
    72                                  
    73                                  io_out32:   ; void io_out32(int port, int data);
    74 0000004D 89FA                        MOV     EDX, EDI ; port
    75 0000004F B800000000                  MOV     EAX, 0
    76 00000054 89F0                        MOV     EAX, ESI        ; data
    77 00000056 EF                          OUT     DX, EAX
    78 00000057 C3                          RET
    79                                  
    80                                  io_load_eflags: ; int io_load_eflags();
    81 00000058 9C                          PUSHFD      ; push flags double word
    82 00000059 58                          POP     EAX
    83 0000005A C3                          RET
    84                                  
    85                                  io_store_eflags:    ; void io_store_eflags();
    86 0000005B 89F8                        MOV     EAX, EDI
    87 0000005D 50                          PUSH    EAX
    88 0000005E 9D                          POPFD           ; pop flags double word
    89 0000005F C3                          RET
    90                                  
